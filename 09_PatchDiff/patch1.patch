--- maze_initial.c	2024-11-20 23:01:01.082934865 +0300
+++ size_from_command_line.c	2024-11-20 23:01:05.066096029 +0300
@@ -1,18 +1,13 @@
 #include <stdio.h>
 #include <stdlib.h>
 
-#define N 6
-#define MAP_SIZE (2 * N + 1)
-
 typedef struct {
     int x, y;
 } Point;
 
-char map[MAP_SIZE][MAP_SIZE];
-
-void init_map() { // Непроходимый лабиринт по примеру
-    for (int i = 0; i < MAP_SIZE; i++) {
-        for (int j = 0; j < MAP_SIZE; j++) {
+void init_map(char **map, int map_size) {
+    for (int i = 0; i < map_size; i++) {
+        for (int j = 0; j < map_size; j++) {
             if (i % 2 == 0 || j % 2 == 0) {
                 map[i][j] = '#';
             } else {
@@ -22,20 +17,27 @@
     }
 }
 
-int is_valid(int x, int y) {
-    return x > 0 && x < MAP_SIZE - 1 && y > 0 && y < MAP_SIZE - 1;
+int is_valid(int x, int y, int map_size) {
+    return x > 0 && x < map_size - 1 && y > 0 && y < map_size - 1;
 }
 
-void carve_passage(Point from, Point to) { // Remove wall
+void carve_passage(char **map, Point from, Point to) {
     int dx = (to.x - from.x) / 2;
     int dy = (to.y - from.y) / 2;
     map[from.x + dx][from.y + dy] = '.';
     map[to.x][to.y] = '.';
 }
 
-void generate_maze() {
-    int visited[N][N] = {0};
-    Point stack[N * N];
+void generate_maze(char **map, int n) {
+    int map_size = 2 * n + 1;
+    int visited[n][n];
+    for (int i = 0; i < n; i++) {
+        for (int j = 0; j < n; j++) {
+            visited[i][j] = 0;
+        }
+    }
+
+    Point stack[n * n];
     int stack_size = 0;
 
     Point current = {1, 1};
@@ -55,14 +57,14 @@
             int nx = directions[i].x;
             int ny = directions[i].y;
 
-            if (is_valid(nx, ny) && !visited[(nx - 1) / 2][(ny - 1) / 2]) {
+            if (is_valid(nx, ny, map_size) && !visited[(nx - 1) / 2][(ny - 1) / 2]) {
                 neighbors[neighbors_count++] = (Point){nx, ny};
             }
         }
 
         if (neighbors_count > 0) {
             Point next = neighbors[rand() % neighbors_count];
-            carve_passage(current, next);
+            carve_passage(map, current, next);
             current = next;
             visited[(current.x - 1) / 2][(current.y - 1) / 2] = 1;
             stack[stack_size++] = current;
@@ -72,9 +74,9 @@
     }
 }
 
-void print_map() {
-    for (int i = 0; i < MAP_SIZE; i++) {
-        for (int j = 0; j < MAP_SIZE; j++) {
+void print_map(char **map, int map_size) {
+    for (int i = 0; i < map_size; i++) {
+        for (int j = 0; j < map_size; j++) {
             printf("%c", map[i][j]);
         }
         printf("\n");
@@ -82,9 +84,28 @@
     printf("\n");
 }
 
-int main() {
-    init_map();
-    generate_maze();
-    print_map();
+int main(int argc, char *argv[]) {
+    if (argc < 2) {
+        fprintf(stderr, "Usage: %s <size>\n", argv[0]);
+        return 1;
+    }
+
+    int n = atoi(argv[1]);
+    int map_size = 2 * n + 1;
+
+    char **map = malloc(map_size * sizeof(char *));
+    for (int i = 0; i < map_size; i++) {
+        map[i] = malloc(map_size * sizeof(char));
+    }
+
+    init_map(map, map_size);
+    generate_maze(map, n);
+    print_map(map, map_size);
+
+    for (int i = 0; i < map_size; i++) {
+        free(map[i]);
+    }
+    free(map);
+
     return 0;
 }
